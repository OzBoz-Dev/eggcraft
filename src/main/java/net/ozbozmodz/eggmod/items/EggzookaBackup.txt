package net.ozbozmodz.eggmod.items;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

import net.fabricmc.fabric.api.entity.event.v1.EntityElytraEvents;
import net.minecraft.client.gui.screen.Screen;
import net.minecraft.component.ComponentMap;
import net.minecraft.entity.LivingEntity;
import net.minecraft.entity.player.PlayerEntity;
import net.minecraft.entity.projectile.ProjectileEntity;
import net.minecraft.entity.projectile.thrown.EggEntity;
import net.minecraft.entity.projectile.thrown.ThrownItemEntity;
import net.minecraft.inventory.StackReference;
import net.minecraft.item.EggItem;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.RangedWeaponItem;
import net.minecraft.screen.slot.Slot;
import net.minecraft.sound.SoundCategory;
import net.minecraft.sound.SoundEvents;
import net.minecraft.stat.Stats;
import net.minecraft.text.Text;
import net.minecraft.util.ClickType;
import net.minecraft.util.Hand;
import net.minecraft.util.TypedActionResult;
import net.minecraft.util.collection.DefaultedList;
import net.minecraft.world.World;
import net.ozbozmodz.eggmod.entities.ImplementedInventory;
import net.ozbozmodz.eggmod.throwableEggs.BlastEggEntity;
import net.ozbozmodz.eggmod.throwableEggs.CustomEggEntity;
import net.ozbozmodz.eggmod.throwableEggs.CustomEggItem;
import net.ozbozmodz.eggmod.util.CustomDataComponents;
import net.ozbozmodz.eggmod.util.ModItemTags;
import org.jetbrains.annotations.Nullable;

public class Eggzooka extends RangedWeaponItem implements EtcherInventory{
    private static final String ITEMS_KEY = "Items";
    public static final Predicate<ItemStack> EGGZOOKA_PROJECTILES = stack -> stack.isIn(ModItemTags.EGGZOOKA_PROJECTILES);
    private final DefaultedList<ItemStack> ammunition = DefaultedList.ofSize(2, ItemStack.EMPTY);
    private int selectedSlot;

    public Eggzooka(Settings settings) {
        super(settings);
        selectedSlot = 0;
    }

    @Override
    public Predicate<ItemStack> getProjectiles() {
        return EGGZOOKA_PROJECTILES;
    }

    @Override
    public int getRange() {
        return 30;
    }

    @Override
    protected void shoot(LivingEntity shooter, ProjectileEntity projectile, int index, float speed, float divergence, float yaw, @Nullable LivingEntity target) {

    }

    @Override
    public ItemStack getDefaultStack() {
        ItemStack result = new ItemStack(this);
        result.set(CustomDataComponents.EGG_COUNTS, new ArrayList<Integer>());
        result.set(CustomDataComponents.EGG_TYPES, new ArrayList<String>());
        return result;
    }

    protected ItemStack getStack(int index, ItemStack heldWeapon){
        if (heldWeapon.getComponents().contains(CustomDataComponents.EGG_COUNTS) && heldWeapon.getComponents().contains(CustomDataComponents.EGG_TYPES)) {
            int eggCount = heldWeapon.get(CustomDataComponents.EGG_COUNTS).get(index);
            String eggType = heldWeapon.get(CustomDataComponents.EGG_TYPES).get(index);
            Item eggItem = CustomEggItem.stringToItem(eggType);
            if (eggItem != null) return new ItemStack(eggItem, eggCount);
        }
        return ItemStack.EMPTY;
    }

    @Override
    public TypedActionResult<ItemStack> use(World world, PlayerEntity user, Hand hand) {
        if (!world.isClient){
            if (Screen.hasShiftDown()){
                user.sendMessage(Text.literal("Switched from slot " + selectedSlot + " with " + this.getStack(selectedSlot).getName().getString()));
                selectedSlot++;
                selectedSlot %= 2;
                user.sendMessage(Text.literal("Switched to slot " + selectedSlot + " with " + this.getStack(selectedSlot).getName().getString()));
                user.getItemCooldownManager().set(this, 10);
                return TypedActionResult.pass(user.getStackInHand(hand));
            }
            else if (!this.getStack(selectedSlot).isEmpty()){
                this.spawnRelevant(world, user, this.getStack(selectedSlot));
                return TypedActionResult.success(user.getStackInHand(hand));

            }
        }
        return TypedActionResult.fail(user.getStackInHand(hand));
    }


    public void spawnRelevant(World world, PlayerEntity user, ItemStack itemStack){
        Item item = itemStack.getItem();
        CustomEggEntity ourEgg = null;
        if (item instanceof CustomEggItem) {
            ourEgg = CustomEggItem.getType(((CustomEggItem) item).type, world, user);
        }
        if (!world.isClient && ourEgg != null) {
            world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.ENTITY_EGG_THROW, SoundCategory.PLAYERS, 0.5f, 0.4f / (world.getRandom().nextFloat() * 0.4f + 0.8f));
            ourEgg.setItem(itemStack);
            ourEgg.setVelocity(user, user.getPitch(), user.getYaw(), 0.0f, 2.0f, 1.0f);
            world.spawnEntity(ourEgg);
        }
        user.incrementStat(Stats.USED.getOrCreateStat(this));
        if (!user.getAbilities().creativeMode) {
            itemStack.decrement(1);
        }
    }

    @Override
    public boolean onClicked(ItemStack stack, ItemStack otherStack, Slot slot, ClickType clickType, PlayerEntity player,
            StackReference cursorStackReference) {
        System.out.println("Point 0");
//        if (player.getWorld().isClient()) return false;

        if (clickType != ClickType.RIGHT || !slot.canTakePartial(player)) {
            System.out.println("Point 1");
            return false;
        }
//        if (otherStack.isEmpty() && !this.isEmpty()){
//            cursorStackReference.set(this.getStack(selectedSlot).copy());
//            this.setStack(selectedSlot, otherStack.copy());
//            setNbtData(stack, otherStack, player.getWorld());
//            return true;
//        }
        else if (this.getStack(selectedSlot).isEmpty() && (otherStack.getItem() instanceof CustomEggItem)) {
            System.out.println("Setting stack");
            this.setStack(selectedSlot, otherStack.copy());
            setNbtData(stack, otherStack, player.getWorld());
            otherStack.decrement(otherStack.getCount());
            return true;
        }
        return false;
    }

    public void setNbtData(ItemStack stack, ItemStack otherStack, World world){
//        List<String> eggTypes = new ArrayList<String>();
//        List<Integer> eggCounts = new ArrayList<Integer>();
//        for (int i = 0; i < 2; i++){
//            eggTypes.set(i, ((CustomEggItem)this.getStack(i).getItem()).type);
//            eggCounts.set(i, this.getStack(i).getCount());
//        }
//        stack.set(CustomDataComponents.EGG_TYPES, eggTypes);
//        stack.set(CustomDataComponents.EGG_COUNTS, eggCounts);
    }

    @Override
    public DefaultedList<ItemStack> getItems() {
        return ammunition;
    }

    // @Override
    // public void appendTooltip(ItemStack stack, World world, List<Text> tooltip, TooltipContext context) {
    //     if (Screen.hasShiftDown()){
    //         tooltip.add(Text.translatable("item.eggmod.eggzooka.tooltip_2"));
    //         for (int i = 0; i < 2; i++){
    //             Text t = this.getStack(i).getName();
    //             if (t.asTruncatedString(100).equals("Air"))
    //                 t = Text.of("Empty");
    //             tooltip.add(Text.translatable("item.eggmod.eggzooka.tooltip_sub").append(Text.of(""+i + ": ")).append(((MutableText)t).formatted(Formatting.AQUA)));
    //         }
    //         return;
    //     }
    //     Text t = this.getStack(selectedSlot).getName();
    //             if (t.asTruncatedString(100).equals("Air"))
    //                 t = Text.of("Empty");
    //     tooltip.add(Text.translatable("item.eggmod.eggzooka.tooltip_1").append(((MutableText)t).formatted(Formatting.AQUA)));
    // }



}
